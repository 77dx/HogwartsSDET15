"""
@ Title:
@ Author: Cathy
@ Time: 2024/4/18 14:36
"""
# c语言中，实现函数交换两个整型的函数，是通过指针找到两个变量的地址，然后通过修改指针直接修改地址里面保存的数值，变量的指向没有变化；
# 因为调用函数时，实参是地址，地址可以找到地址所对应的变量，当地址的数值修改了，变量的值也就修改了，swap函数无需返回。
# 函数在被调用时，实参传给形参，形参其实是实参的一份临时拷贝，在函数调用完后就自动销毁了，形参只是在函数中有效，改变形参，不能改变实参。

# python中，swap函数的入参实际上就是两个变量的地址，通过交换两个变量对地址的引用来实现数值的交换，也就是，更改了两个变量的引用
# a指向了b的地址，b指向了a的地址，实际内存地址的值没有被修改，所以函数必须返回a和b，如果不返回，形参会在函数调用结束后被销毁，不会保存。
# 函数内形参的值和函数外变量是没有关联关系的。
# python 以引用方式管理对象，可以交换引用，但通常不能交换内存中的对象值。


def swap(a, b):
    a, b = b, a
    return a, b


if __name__ == '__main__':
    x = 10
    y = 20
    print("********交换前********")
    print(f"x的id:{id(x)}")
    print(f"y的id:{id(y)}")
    print(f"未交换：x={x}, y={y}")
    x, y = swap(x, y)
    print("********交换后********")
    print(f"x的id:{id(x)}")
    print(f"y的id:{id(y)}")
    print(f"交换后：x={x}, y={y}")
